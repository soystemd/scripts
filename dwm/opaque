#!/bin/sh
# Get class name of a program and make all it's instances
# transparent, opaque or toggle it at will.
#
# This script handles my terminal,s transparency.
# See, in some dwm layouts, windows fall on top of eachother, and having an
# Always-Transparent terminal wouldn'd be nice then. so I have dwm to just
# toggle it off in those layouts, and Toggle it back on in tiling layouts.

# Config
opacity_transparent="0xddffffff"
opacity_semitrans="0xefffffff"
opacity_opaque="0xffffffff"
tmpdir=/tmp

######
main() {

    if [ -z "$1" ] &&
       [ -z "$2" ]; then
       print_help_and_exit 0
    fi

    window_class="$2"

    case "$1" in
        -0 | -1 | -t | -r | -i)
            [ -z "$2" ] && print_help_and_exit 1
            ;;
    esac

# Handle Args
    case "$1" in
        -h | --help) print_help_and_exit 0 ;;
        -0) set_all_windows transparent "$opacity_transparent" ;;
        -1) set_all_windows opaque "$opacity_opaque" ;;
        -2) set_all_windows semitrans "$opacity_semitrans" ;;
        -t) toggle_transparency_all_windows ;;
        -r) reapply_transparency_all_windows ;;
        -i) opaque_init ;;
        -c) opaque_cleanup ;;
        *) print_help_and_exit 0 ;;
    esac
}
######



######
set_all_windows() {
    local status="$1"
    local opacity="$2"
    set_raw_opacity_all_windows "$opacity"
    exit_if_not_initialized no-print-error
    set_status "$status"
}

toggle_transparency_all_windows() {
    exit_if_not_initialized # reapplying requires initialization
    case "$(get_status)" in
        opaque)
            [ "$(dwmc getlayoutname)" = cmaster ] && set_all_windows semitrans "$opacity_semitrans" && return
            set_all_windows transparent "$opacity_transparent"
            ;;
        semitrans) set_all_windows opaque "$opacity_opaque" ;;
        transparent) set_all_windows opaque "$opacity_opaque" ;;
    esac
}

reapply_transparency_all_windows() {
    exit_if_not_initialized # reapplying requires initialization
    case "$(get_status)" in
        opaque) set_all_windows opaque "$opacity_opaque" ;;
        semitrans) set_all_windows semitrans "$opacity_semitrans" ;;
        transparent) set_all_windows transparent "$opacity_transparent" ;;
    esac
}
######



######
set_raw_opacity_all_windows() {
    local window_id_list="$(
        xdotool search --class "$window_class")"

    local opacity="$1"

    while IFS= read -r window_id
    do
        echo "$window_id"
        xprop -id "$window_id" -format _NET_WM_WINDOW_OPACITY 32x \
            -set _NET_WM_WINDOW_OPACITY "$opacity"

    done <<< "$window_id_list"
}
######



######
opaque_init() {
    remove_previous_status_files
    mktemp -q "$tmpdir/opaque-${USER}-${window_class}-XXXXXX"
    set_status
}

opaque_cleanup() {
    find -P "$tmpdir" -maxdepth 1 -name opaque-\* -delete
}

exit_if_not_initialized() {
    run_action=0
    [ -z "$(get_status_file_path)" ] &&
        run_action=1 &&
    [ "$1" = "no-print-error" ] &&
        exit 0
    [ "$run_action" = "1" ] && error "not initialized"
}

set_status() {
    local status_file="$(get_status_file_path)"
    echo "$1" > "$status_file"
}

get_status() {
    local status_file="$(get_status_file_path)"
    cat "$status_file"
}

remove_previous_status_files() {
    local status_file="$(get_status_file_path)"
    rm -f "$status_file"
}

get_status_file_path() {
    local status_file="$(
        find -P "$tmpdir" -maxdepth 1 -name opaque-${USER}-${window_class}\*)" ||
        error "get_status_file_path failed"
    echo "$status_file"
}
######



######
error() {
    echo "error: ${1}"
    exit 1
}
######



######
print_help_and_exit() {
echo '
Manipulate the transparency of all windows of the same class
Requires a compositor to work

    Usage: opaque [OPTION] <WINDOW_CLASS>

Options:

  -0    set all windows transparent
  -1    set all windows opaque

  -i    initialize; create and set the temp files
            initialization is required for using the next two options

  -t    toggle transparency for all windows
  -r    reapply transparency to all windows
            useful for applying transparency to newly opened windows of a program.

  -c    cleanup all the tempfiles;
            can be used without any other arguments

  -h | --help    print the help message and exit
'
exit "$1"
}
######

main "$@"
exit 0

#-po | --set-active-window-opaque-and-preserve-opacity)
#    set_activewindow_opaque_and_preserve
#    ;;
#-pr | --revert-active-window-opacity)
#    revert_activewindow_opacity
#    ;;
