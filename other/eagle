#!/bin/sh
#
#################
# Configuration #
#################
#
# Break interval in minutes.
# zero means disabled.
break_interval=20
#
# If came back from idle, change the next time to break to
# this value in minutes.
# zero means the same as break interval.
next_break_after_idle=15
#
# Lock the session if idle for this many minutes.
# zero means disabled.
session_locking=10
#
# How long in seconds should the mouse and keyboard idle
# to consider the system idling.
idle_threshold=90

#############
# Functions #
#############

# tmpfile path
tmpfile="/tmp/eagle-${USER}"

main() {

case "$1" in
    -t) toggle_pause; exit ;;
    -h | --help) print_help; exit ;;
    -v | --verbose | -d | --debug) debug=true ;;
esac

init; write_to_file

while true; do

    sleep 5

    [ "$debug" = "true" ] && echo "
    --------------------------

    session_locking_converted=
    $session_locking_converted

    idle=
    $idle

    idle_time=
    $idle_time

    xprintidle=
    $(xprintidle)

    idle_threshold_msec=
    $idle_threshold_msec

    is_paused=
    $(is_paused)
    "

    # if pc is not idle:
    if [ "$(xprintidle)" -le "$idle_threshold_msec" ]; then

        idle=false
        idle_time=0
        # if breaking isn't disabled, run the 5-sec timekeeper function
        [ "$break_interval" -gt "0" ] && [ "$(is_paused)" = "false" ] &&\
            run_every_5_sec

    # if pc is idling:
    else

        # reset all the variables and shit like that
        minutes_till_next_break=$next_break_after_idle
        [ "$next_break_after_idle" -le "0" ] &&\
            minutes_till_next_break=$break_interval

        # update the file only once after going idle
        if [ "$idle" = "false" ]; then write_to_file; idle=true; fi

        # if session locking is enabled, increment idle timer timer
        [ "$session_locking" -gt "0" ] && idle_time=$(( idle_time + 1 ))

        # if we've reached the session locking time threshold, lock the session.
        if [ "$idle_time" -ge "$session_locking_converted" ]; then
            koonix-lock
            [ "$debug" = "true" ] && echo "    Locked"
            idle_time=0
        fi
    fi
done
}


run_every_5_sec() {
    five_secs_intervals_till_next_min=$((\
        five_secs_intervals_till_next_min - 1 ))
    if [ "$five_secs_intervals_till_next_min" -le "0" ]; then
        five_secs_intervals_till_next_min="12"
        run_every_min
    fi
}

run_every_min() {
    minutes_till_next_break=$(( minutes_till_next_break - 1 ))
    write_to_file
    if [ "$minutes_till_next_break" -le "0" ]; then
        minutes_till_next_break="$break_interval"
        koonix-lock -b
        write_to_file
    fi

}


write_to_file() {
    [ "$1" = pause ] && echo "$1" > "$tmpfile" && return
    echo "$minutes_till_next_break" > "$tmpfile"
}

toggle_pause() {
    [ "$(is_paused)" = "true" ] && init && write_to_file && return
    write_to_file pause
}

is_paused() {
    [ "$(cat "$tmpfile")" = "pause" ] && echo true && return
    echo false
}

# Init
init() {
    idle_threshold_msec=$(( idle_threshold * 1000))
    session_locking_converted=$((\
        (session_locking * 60 - idle_threshold) / 5  ))
    minutes_till_next_break=$break_interval
    five_secs_intervals_till_next_min=12
    idle_time=0
    idle=false
}

print_help() {
echo '
eagle handles locking the pc if idle and making you take periodic breaks.

options:
    -t              toggle pause/restart the break timer
    --help, -h      print help and exit
    --verbose, --debug,
    -v, -d          run eagle and print debugging info every five seconds
'
}

main "$@"
exit
