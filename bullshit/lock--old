#!/bin/sh
# screen locking script.
# requires: slock, xprintidle, xset, my autolock script.

# Config
dpms_delay_sec=120
lock_cmd=slock
lock_cmd_alt=slock-alt

# Init variables
pause=true
dpms=true
invoked_by_autolock=false
cmd="$lock_cmd"

# Handle args
while [ -n "$1" ]; do
    case "$1" in
        --no-pause) pause=false ;;
        --no-dpms) dpms=false ;;
        --alt) cmd="$lock_cmd_alt" ;;
        --invoked-by-autolock) invoked_by_autolock=true ;;
        *) break ;;
    esac
    shift
done

# Fix keyboard layout and stuff before locking
remaps

# Pause all playing media before locking
[ "$pause" = true ] && pause-all &

(
    # disable autolocking
    autolock_state=off
    if [ "$invoked_by_autolock" = false ]; then
        pgrep autolock && autolock_state=on
        killall -q autolock
    fi

    # lock the screen
    eval "$cmd"

    # apply key remaps again
    setsid -f remaps-delayed >/dev/null 2>&1

    # re-enable autolocking if it was enabled before
    [ "$autolock_state" = on ] && setsid -f autolock

    # kill this script
    killall lock
) &

# dpms function, used below
dpms()
{
    mon=on
    offset="$(xprintidle)"
    while true; do
        rawidle="$(xprintidle)"
        idle="$(( rawidle - offset ))"
        if [ "$idle" -ge "$((dpms_delay_sec * 1000))" ] && [ "$mon" = "on" ]; then
            mon=off
            offset=0
            xset dpms force off
        elif [ "$idle" -lt "$((dpms_delay_sec * 1000))" ] && [ "$mon" = "off" ]; then
            mon=on
        fi
        sleep 10
    done
}

# Turn off the monitor if idle
[ "$dpms" = true ] && dpms
