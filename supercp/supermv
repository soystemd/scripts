#!/bin/sh
# A replacement for mv with progressbar,
#
# It's also filesystem-aware, so if you are moving files inside a filesystem,
# It falls back to mv instead of copying and then deleting, because mv is
# faster than copying and then deleting the files when moving files within
# the same filesystem/partition.

# error file
err="/tmp/supermv-error-${USER}"

# opts
fallback=false
case "$1" in
    --classic|--fallback) shift; fallback=true ;;
esac

# check the number of given args (should be 2 or more)
if [ "$#" -lt 2 ]; then
    echo "specify paths"
    exit 1
fi

# use good ol' mv if --fallback flag is given
fallback()
{
    echo "using mv..."
    mv -i -- "$@"
    exit 0
}
[ "$fallback" = "true" ] && fallback "$@"


# check src-destination filesystems.
for dest; do true; done
dest_fs="$(stat -c "%d" "$dest")"

i="$#";
for src; do
    src_fs="$(stat -c "%d" "$src")"
    if [ "$src_fs" = "$dest_fs" ]; then
        fallback=true
        break
    fi
    i=$(( i - 1 ))
    [ "$i" -le 1 ] && break
done

# use good ol' mv if one or more of the src-destination pairs are on the same filesystem.
[ "$fallback" = "true" ] && fallback "$@"

# use rsync, but don't display rsync's error message if it's exit code is 20
exec 2>"$err"
rsync -a --remove-source-files --info=progress2 -- "$@"
if [ $? -ne 20 ]; then
    cat "$err"
fi
rm -f "$err"

# remove leftover empty directories in srcs.
i="$#";
for src; do
    find "$src" -type d -empty -delete
    i=$(( i - 1 ))
    [ "$i" -le 1 ] && break
done
